// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Passageiro {
  CPF          String               @id
  Email        String               @unique
  Senha        String
  Nome         String
  Telefone     String
  CriadoEm     DateTime             @default(now())
  AtualizadoEm DateTime?            @updatedAt
  RemovidoEm   DateTime?
  viagens      PassageiroOnViagem[]

}

model Carro {
  Id          Int       @id @default(autoincrement())
  Modelo      String
  Marca       String
  Placa       String
  Ano         Int
  Assentos    Int
  Cor         String
  mostorista  Motorista @relation(fields: [motoristaId], references: [CPF])
  motoristaId String


}

model Motorista {
  CPF          String              @id
  Email        String              @unique
  Nome         String
  Senha        String
  Telefone     String
  carro        Carro[]
  CriadoEm     DateTime            @default(now())
  AtualizadoEm DateTime?           @updatedAt
  RemovidoEm   DateTime?
  viagens      MotoristaOnViagem[]
}

model Viagem {
  Id          Int                  @id @default(autoincrement())
  HoraSaida   DateTime
  Valor       Decimal
  DataIda     DateTime
  passageiros PassageiroOnViagem[]
  motoristas  MotoristaOnViagem[]
  endereco    Endereco @relation(fields: [enderecoId], references: [Id])
  enderecoId  Int

}

model PassageiroOnViagem {
  passageiro   Passageiro @relation(fields: [passageiroId], references: [CPF])
  passageiroId String
  viagem       Viagem     @relation(fields: [viagemId], references: [Id])
  viagemId     Int
  reservadoEm  DateTime   @default(now())
  IsConcluido  Boolean
  iniciadoEm   DateTime?
  concluidoEm  DateTime?
  avaliacao    Float?

  @@id([passageiroId, viagemId])
}

model MotoristaOnViagem {
  motorista   Motorista @relation(fields: [motoristaId], references: [CPF])
  motoristaId String
  viagem      Viagem    @relation(fields: [viagemId], references: [Id])
  viagemId    Int
  reservadoEm DateTime  @default(now())
  IsConcluido Boolean
  iniciadoEm   DateTime?
  concluidoEm DateTime?
  avaliacao   Float?

  @@id([motoristaId, viagemId])
}

model Estado {
  Id      Int      @id @default(autoincrement())
  Nome    String
  Uf      String
  cidades Cidade[]

}

model Cidade {
  Id        Int        @id @default(autoincrement())
  Nome      String
  estado    Estado     @relation(fields: [estadoId], references: [Id])
  estadoId  Int
  enderecos Endereco[]
}

model Endereco {
  Id              Int    @id @default(autoincrement())
  Logradouro      String
  PontoReferencia String
  cidade          Cidade @relation(fields: [cidadeId], references: [Id])
  cidadeId        Int
  viagem          Viagem[] 
  Numero          Int?
}
